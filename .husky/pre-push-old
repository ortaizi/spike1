#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# üéì SPIKE ACADEMIC PLATFORM - PRE-PUSH HOOKS
# Enterprise-grade validation before push to remote

echo "üöÄ Spike Academic Platform - Pre-push validation starting..."

# ================================================================================================
# üîç COMPREHENSIVE CHECKS
# ================================================================================================

echo "üìã Running comprehensive pre-push checks..."

# Get the current branch
current_branch=$(git branch --show-current)
remote_branch="origin/$current_branch"

# Check if we're pushing to main/master branch
if [ "$current_branch" = "main" ] || [ "$current_branch" = "master" ]; then
  echo "‚ö†Ô∏è  Pushing to $current_branch branch - running extra validation..."
  EXTRA_VALIDATION=true
else
  EXTRA_VALIDATION=false
fi

# ================================================================================================
# üîß TYPE CHECKING
# ================================================================================================

echo "üîß Running TypeScript type checking..."

npm run type-check

if [ $? -ne 0 ]; then
  echo "‚ùå TypeScript type checking failed! Please fix type errors before pushing."
  exit 1
fi

echo "‚úÖ TypeScript type checking passed"

# ================================================================================================
# üß™ TESTING
# ================================================================================================

echo "üß™ Running unit tests..."

npm run test:unit

if [ $? -ne 0 ]; then
  echo "‚ùå Unit tests failed! Please fix failing tests before pushing."
  exit 1
fi

echo "‚úÖ Unit tests passed"

# ================================================================================================
# üåç HEBREW/RTL TESTING (MANDATORY per CLAUDE.md)
# ================================================================================================

echo "üåç Running Hebrew/RTL specific tests..."

# Run Hebrew component tests if they exist
if [ -f "package.json" ] && grep -q "test:hebrew" package.json; then
  echo "üß™ Running Hebrew component tests..."
  npm run test:hebrew
  
  if [ $? -ne 0 ]; then
    echo "‚ùå Hebrew component tests failed! Please fix Hebrew/RTL issues before pushing."
    exit 1
  fi
  
  echo "‚úÖ Hebrew component tests passed"
fi

# Run RTL lint checks if available
if [ -f "package.json" ] && grep -q "lint:rtl" package.json; then
  echo "üîç Running RTL compliance checks..."
  npm run lint:rtl
  
  if [ $? -ne 0 ]; then
    echo "‚ùå RTL compliance checks failed! Please fix RTL issues before pushing."
    exit 1
  fi
  
  echo "‚úÖ RTL compliance checks passed"
fi

# ================================================================================================
# üîç LINTING
# ================================================================================================

echo "üîç Running ESLint..."

npm run lint

if [ $? -ne 0 ]; then
  echo "‚ùå ESLint checks failed! Please fix linting errors before pushing."
  exit 1
fi

echo "‚úÖ ESLint checks passed"

# ================================================================================================
# üé® FORMATTING CHECK
# ================================================================================================

echo "üé® Checking code formatting..."

npm run format:check

if [ $? -ne 0 ]; then
  echo "‚ùå Code formatting check failed! Please run 'npm run format' to fix."
  exit 1
fi

echo "‚úÖ Code formatting check passed"

# ================================================================================================
# üîí SECURITY AUDIT (for main branch)
# ================================================================================================

if [ "$EXTRA_VALIDATION" = true ]; then
  echo "üîí Running security audit..."
  
  npm run security:audit
  
  if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  Security vulnerabilities detected! Please review and fix."
    echo "You can continue pushing but should address these issues soon."
  else
    echo "‚úÖ Security audit passed"
  fi
fi

# ================================================================================================
# üì¶ BUILD TEST (for main branch)
# ================================================================================================

if [ "$EXTRA_VALIDATION" = true ]; then
  echo "üì¶ Testing production build..."
  
  npm run build
  
  if [ $? -ne 0 ]; then
    echo "‚ùå Production build failed! Please fix build errors before pushing to main."
    exit 1
  fi
  
  echo "‚úÖ Production build test passed"
fi

# ================================================================================================
# üéì ACADEMIC PLATFORM SPECIFIC VALIDATION
# ================================================================================================

echo "üéì Running academic platform specific validation..."

# Check for Hebrew content integrity
if git diff --name-only HEAD $remote_branch 2>/dev/null | xargs grep -l "[◊ê-◊™]" 2>/dev/null; then
  echo "üåç Validating Hebrew content changes..."
  
  # Check for broken Hebrew text
  for file in $(git diff --name-only HEAD $remote_branch 2>/dev/null | xargs grep -l "[◊ê-◊™]" 2>/dev/null); do
    if [ -f "$file" ]; then
      # Check for mixed RTL/LTR issues (simplified check)
      if grep -E "[a-zA-Z][◊ê-◊™]|[◊ê-◊™][a-zA-Z]" "$file" > /dev/null; then
        echo "‚ö†Ô∏è  Potential RTL/LTR mixing in $file - please review"
      fi
    fi
  done
  
  echo "‚úÖ Hebrew content validation passed"
fi

# Validate API routes haven't broken
if git diff --name-only HEAD $remote_branch 2>/dev/null | grep "app/api/" > /dev/null; then
  echo "üîó API routes changed - validating structure..."
  
  # Check that API routes export proper HTTP methods
  for api_file in $(git diff --name-only HEAD $remote_branch 2>/dev/null | grep "app/api/.*route\.(ts|js)$"); do
    if [ -f "$api_file" ]; then
      if ! grep -E "export\s+(async\s+)?function\s+(GET|POST|PUT|DELETE|PATCH)" "$api_file" > /dev/null; then
        echo "‚ö†Ô∏è  API route $api_file might not export HTTP methods properly"
      fi
    fi
  done
  
  echo "‚úÖ API routes validation passed"
fi

# ================================================================================================
# üìä PERFORMANCE CHECKS (for main branch)
# ================================================================================================

if [ "$EXTRA_VALIDATION" = true ]; then
  echo "üìä Running performance checks..."
  
  # Check bundle size (simplified)
  if [ -d ".next" ]; then
    bundle_size=$(du -sh .next 2>/dev/null | cut -f1)
    echo "üì¶ Current bundle size: $bundle_size"
  fi
  
  # Check for performance anti-patterns in staged files
  if git diff --name-only HEAD $remote_branch 2>/dev/null | xargs grep -l "useState.*\[\].*useState" 2>/dev/null; then
    echo "‚ö†Ô∏è  Multiple useState calls detected - consider useReducer or Zustand"
  fi
  
  echo "‚úÖ Performance checks completed"
fi

# ================================================================================================
# üåê DEPLOYMENT READINESS (for main branch)
# ================================================================================================

if [ "$EXTRA_VALIDATION" = true ]; then
  echo "üåê Checking deployment readiness..."
  
  # Check for environment variables
  if [ ! -f ".env.example" ]; then
    echo "‚ö†Ô∏è  .env.example file missing - create one for deployment guidance"
  fi
  
  # Check for required deployment files
  REQUIRED_FILES=("package.json" "next.config.js" "tsconfig.json")
  for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
      echo "‚ùå Required file missing for deployment: $file"
      exit 1
    fi
  done
  
  echo "‚úÖ Deployment readiness check passed"
fi

# ================================================================================================
# ‚úÖ SUCCESS
# ================================================================================================

echo ""
echo "‚úÖ All pre-push checks passed!"
echo "üöÄ Spike Academic Platform - Ready for push to $current_branch"

if [ "$EXTRA_VALIDATION" = true ]; then
  echo "üéØ Main branch validation completed successfully"
fi

echo ""
