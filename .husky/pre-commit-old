#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# 🎓 SPIKE ACADEMIC PLATFORM - PRE-COMMIT HOOKS
# Enterprise-grade validation before commit

echo "🎯 Spike Academic Platform - Pre-commit validation starting..."

# ================================================================================================
# 🔍 BASIC CHECKS
# ================================================================================================

echo "📋 Running basic file checks..."

# Check for merge conflict markers
if git diff --cached --name-only | xargs grep -l "^<<<<<<< \|^======= \|^>>>>>>> " 2>/dev/null; then
  echo "❌ Merge conflict markers found! Please resolve conflicts before committing."
  exit 1
fi

# Check for TODO/FIXME comments in staged files
if git diff --cached --name-only | xargs grep -l "TODO\|FIXME\|XXX\|HACK" 2>/dev/null; then
  echo "⚠️  TODO/FIXME comments found in staged files. Consider resolving before commit."
fi

# Check for console.log statements (warn only)
if git diff --cached --name-only | grep -E "\.(ts|tsx|js|jsx)$" | xargs grep -l "console\.log" 2>/dev/null; then
  echo "⚠️  console.log statements found. Consider using proper logging in production."
fi

# ================================================================================================
# 🔐 SECURITY CHECKS
# ================================================================================================

echo "🔒 Running security checks..."

# Check for potential secret leaks
SECRET_PATTERNS=(
  "password\s*[:=]\s*['\"][^'\"]+['\"]"
  "secret\s*[:=]\s*['\"][^'\"]+['\"]"
  "api[_-]?key\s*[:=]\s*['\"][^'\"]+['\"]"
  "token\s*[:=]\s*['\"][^'\"]+['\"]"
  "private[_-]?key"
  "-----BEGIN.*PRIVATE KEY-----"
)

for pattern in "${SECRET_PATTERNS[@]}"; do
  if git diff --cached | grep -iE "$pattern" > /dev/null; then
    echo "❌ Potential secret detected in staged changes! Pattern: $pattern"
    echo "Please remove sensitive data before committing."
    exit 1
  fi
done

# Check for hardcoded URLs that might contain secrets
if git diff --cached | grep -E "https?://[^/]*:[^@]*@" > /dev/null; then
  echo "❌ URL with credentials detected! Please use environment variables."
  exit 1
fi

# ================================================================================================
# 🎓 ACADEMIC PLATFORM SPECIFIC CHECKS
# ================================================================================================

echo "🎓 Running academic platform specific checks..."

# Check for Hebrew text encoding issues
if git diff --cached --name-only | xargs grep -l "[א-ת]" 2>/dev/null; then
  echo "🌍 Hebrew text detected - validating UTF-8 encoding..."
  
  # Validate UTF-8 encoding for Hebrew files
  for file in $(git diff --cached --name-only | xargs grep -l "[א-ת]" 2>/dev/null); do
    if ! file "$file" | grep -q "UTF-8"; then
      echo "❌ Hebrew file $file is not UTF-8 encoded!"
      exit 1
    fi
  done
  
  echo "✅ Hebrew text encoding validation passed"
fi

# ================================================================================================
# 🌍 HEBREW/RTL COMPLIANCE CHECKS (MANDATORY per CLAUDE.md)
# ================================================================================================

echo "🌍 Running Hebrew/RTL compliance checks..."

# Check for hardcoded directional CSS properties (FORBIDDEN)
FORBIDDEN_CSS_PATTERNS=(
  "margin-left"
  "margin-right" 
  "padding-left"
  "padding-right"
  "text-align: left"
  "text-align: right"
  "float: left"
  "float: right"
)

for pattern in "${FORBIDDEN_CSS_PATTERNS[@]}"; do
  if git diff --cached | grep -E "$pattern" > /dev/null; then
    echo "❌ Forbidden directional CSS property detected: $pattern"
    echo "Use logical properties instead (ms-, me-, ps-, pe-, start, end)"
    exit 1
  fi
done

# Check for forbidden Tailwind directional classes
FORBIDDEN_TAILWIND=(
  "\\bml-"
  "\\bmr-" 
  "\\bpl-"
  "\\bpr-"
  "\\btext-left\\b"
  "\\btext-right\\b"
  "\\bjustify-start\\b.*[^s]tart"
  "\\bjustify-end\\b.*[^e]nd"
)

for pattern in "${FORBIDDEN_TAILWIND[@]}"; do
  if git diff --cached | grep -E "$pattern" > /dev/null; then
    echo "❌ Forbidden Tailwind directional class detected: $pattern"
    echo "Use logical classes instead (ms-, me-, ps-, pe-)"
    exit 1
  fi
done

# Check for missing dir="rtl" in components with Hebrew text
if git diff --cached --name-only | grep -E "\.(tsx|jsx)$" | xargs grep -l "[א-ת]" 2>/dev/null; then
  echo "🔍 Checking RTL direction attribute in Hebrew components..."
  
  for file in $(git diff --cached --name-only | grep -E "\.(tsx|jsx)$" | xargs grep -l "[א-ת]" 2>/dev/null); do
    if [ -f "$file" ] && ! grep -q 'dir="rtl"' "$file"; then
      echo "⚠️  Component with Hebrew text missing dir=\"rtl\": $file"
      echo "Please add dir=\"rtl\" to container element"
    fi
  done
fi

# Validate Hebrew test data format
if git diff --cached --name-only | grep -E "\.(test|spec)\.(ts|tsx|js|jsx)$" | xargs grep -l "[א-ת]" 2>/dev/null; then
  echo "🧪 Validating Hebrew test data format..."
  
  # Check for proper Hebrew test strings
  HEBREW_TEST_PATTERNS=(
    "מבוא למדעי המחשב"
    "תרגיל בית"
    "ציון"
    "מועד א"
  )
  
  has_proper_hebrew=false
  for pattern in "${HEBREW_TEST_PATTERNS[@]}"; do
    if git diff --cached | grep -F "$pattern" > /dev/null; then
      has_proper_hebrew=true
      break
    fi
  done
  
  if [ "$has_proper_hebrew" = false ]; then
    echo "⚠️  Hebrew tests detected but missing standard Hebrew test strings"
    echo "Consider using: 'מבוא למדעי המחשב', 'תרגיל בית 3', 'מועד א׳'"
  fi
fi

echo "✅ Hebrew/RTL compliance checks passed"

# Check for BGU-specific course code format
if git diff --cached | grep -E "\b[0-9]{3}-[0-9]-[0-9]{4}\b" > /dev/null; then
  echo "🏫 BGU course codes detected - validating format..."
  
  # Validate BGU course code format (XXX-X-XXXX)
  if git diff --cached | grep -vE "\b[0-9]{3}-[0-9]-[0-9]{4}\b" | grep -E "[0-9]{3}-[0-9]-[0-9]" > /dev/null; then
    echo "⚠️  Invalid BGU course code format detected. Expected: XXX-X-XXXX"
  fi
fi

# ================================================================================================
# 🧪 LINT-STAGED EXECUTION
# ================================================================================================

echo "🔧 Running lint-staged..."

# Run lint-staged with proper error handling
npx lint-staged

# Check if lint-staged succeeded
if [ $? -ne 0 ]; then
  echo "❌ Lint-staged checks failed! Please fix the issues and try again."
  exit 1
fi

# ================================================================================================
# 📊 FINAL VALIDATION
# ================================================================================================

echo "📊 Running final validation..."

# Verify no large files are being committed (handled by lint-staged but double-check)
MAX_FILE_SIZE=5242880  # 5MB in bytes
for file in $(git diff --cached --name-only); do
  if [ -f "$file" ]; then
    file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
    if [ "$file_size" -gt "$MAX_FILE_SIZE" ]; then
      echo "❌ Large file detected: $file ($(echo "scale=2; $file_size/1024/1024" | bc)MB)"
      echo "Please use Git LFS for files larger than 5MB"
      exit 1
    fi
  fi
done

# Check for unresolved merge conflicts in package-lock.json
if git diff --cached --name-only | grep -q "package-lock.json"; then
  if grep -q "^<<<<<<< \|^======= \|^>>>>>>> " package-lock.json 2>/dev/null; then
    echo "❌ Merge conflicts in package-lock.json! Please resolve and regenerate."
    exit 1
  fi
fi

# ================================================================================================
# ✅ SUCCESS
# ================================================================================================

echo "✅ All pre-commit checks passed!"
echo "🎯 Spike Academic Platform - Ready for commit"
echo ""
