name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'docker-compose*.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - 'docker-compose*.yml'

env:
  DOCKER_REGISTRY: registry.spike-platform.com

jobs:
  # Test microservices
  test-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, tenant-service]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: services/${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      working-directory: services/${{ matrix.service }}
      run: npm ci

    - name: Run type checking
      working-directory: services/${{ matrix.service }}
      run: npm run type-check

    - name: Run linting
      working-directory: services/${{ matrix.service }}
      run: npm run lint

    - name: Run unit tests
      working-directory: services/${{ matrix.service }}
      run: npm test

    - name: Run integration tests
      working-directory: services/${{ matrix.service }}
      run: npm run test:integration
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-services
    strategy:
      matrix:
        service: [auth-service, tenant-service]

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'services/${{ matrix.service }}'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Build and push Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [test-services, security-scan]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [auth-service, tenant-service]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Contract testing between services
  contract-tests:
    runs-on: ubuntu-latest
    needs: test-services

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Pact dependencies
      run: npm install -g @pact-foundation/pact-cli

    - name: Run contract tests
      run: |
        # Start services for contract testing
        docker-compose -f docker-compose.test.yml up -d --build

        # Wait for services to be ready
        sleep 30

        # Run Pact tests
        cd tests/contracts
        npm ci
        npm run test:pact

        # Publish contracts if on main branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          npm run pact:publish
        fi

    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, contract-tests]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Deploy with Docker Compose
      run: |
        # Create staging environment file
        cat > .env.staging << EOF
        ENVIRONMENT=staging
        AUTH_SERVICE_IMAGE=${{ env.DOCKER_REGISTRY }}/auth-service:sha-${{ github.sha }}
        TENANT_SERVICE_IMAGE=${{ env.DOCKER_REGISTRY }}/tenant-service:sha-${{ github.sha }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD_STAGING }}
        EOF

        # Deploy services
        docker-compose -f docker-compose.yml --env-file .env.staging up -d

        # Wait for services to be ready
        sleep 60

    - name: Run smoke tests
      run: |
        # Run smoke tests
        cd tests/smoke
        npm ci
        npm run test:staging

  # Multi-tenant validation tests
  multi-tenant-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Run multi-tenant isolation tests
      run: |
        cd tests/multi-tenant
        npm ci
        npm run test:isolation
      env:
        TEST_ENVIRONMENT: staging
        BGU_TEST_CREDENTIALS: ${{ secrets.BGU_TEST_CREDENTIALS }}
        TAU_TEST_CREDENTIALS: ${{ secrets.TAU_TEST_CREDENTIALS }}

    - name: Run tenant provisioning tests
      run: |
        cd tests/multi-tenant
        npm run test:provisioning
      env:
        TEST_ENVIRONMENT: staging

  # Performance testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup K6
      run: |
        wget https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz
        tar -xzf k6-v0.46.0-linux-amd64.tar.gz
        sudo mv k6-v0.46.0-linux-amd64/k6 /usr/local/bin/

    - name: Run performance tests
      run: |
        cd tests/performance
        k6 run --out json=results.json load-test.js
      env:
        TARGET_URL: https://staging.spike-platform.com

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/performance/results.json

  # Deploy to production (manual approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [multi-tenant-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Deploy to production
      run: |
        # Create production environment file
        cat > .env.production << EOF
        ENVIRONMENT=production
        AUTH_SERVICE_IMAGE=${{ env.DOCKER_REGISTRY }}/auth-service:sha-${{ github.sha }}
        TENANT_SERVICE_IMAGE=${{ env.DOCKER_REGISTRY }}/tenant-service:sha-${{ github.sha }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD_PRODUCTION }}
        RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD_PRODUCTION }}
        JWT_SECRET=${{ secrets.JWT_SECRET_PRODUCTION }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        EOF

        # Deploy services
        docker-compose -f docker-compose.yml --env-file .env.production up -d

        # Wait for services to be ready
        sleep 120

    - name: Run production smoke tests
      run: |
        # Wait for all services to be fully ready
        sleep 60

        # Run production readiness tests
        cd tests/smoke
        npm ci
        npm run test:production

    - name: Verify deployment
      run: |
        # Check service health endpoints
        curl -f http://localhost:8001/health || exit 1
        curl -f http://localhost:8002/health || exit 1