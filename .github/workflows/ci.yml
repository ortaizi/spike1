name: 🎓 Spike Academic Platform - CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # ================================================================================================
  # 📋 SETUP & VALIDATION
  # ================================================================================================
  
  setup:
    name: 🔧 Setup & Basic Validation
    runs-on: ubuntu-latest
    outputs:
      node-cache-key: ${{ steps.cache-keys.outputs.node }}
      turbo-cache-key: ${{ steps.cache-keys.outputs.turbo }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔑 Generate cache keys
        id: cache-keys
        run: |
          echo "node=node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT
          echo "turbo=turbo-${{ github.sha }}-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Validate package.json
        run: |
          echo "🎓 Validating Spike platform configuration..."
          node -e "
            const pkg = require('./package.json');
            console.log('📦 Package:', pkg.name, pkg.version);
            console.log('📝 Description:', pkg.description);
            
            // Validate academic platform requirements
            if (!pkg.description.includes('academic')) {
              throw new Error('Package must be academic-focused');
            }
            
            console.log('✅ Package validation passed');
          "

      - name: 📊 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .turbo
          key: ${{ steps.cache-keys.outputs.node }}
          restore-keys: |
            node-${{ env.NODE_VERSION }}-

  # ================================================================================================
  # 🔧 TYPESCRIPT & LINTING
  # ================================================================================================
  
  typecheck-and-lint:
    name: 🔧 TypeScript & Linting
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .turbo
          key: ${{ needs.setup.outputs.node-cache-key }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 TypeScript type checking
        run: |
          echo "🔧 Running TypeScript checks..."
          npm run type-check

      - name: 🔍 ESLint validation
        run: |
          echo "🔍 Running ESLint with enterprise rules..."
          npm run lint

      - name: 🎨 Prettier format check
        run: |
          echo "🎨 Checking code formatting..."
          npm run format:check

      - name: 🌍 Hebrew content validation
        run: |
          echo "🌍 Validating Hebrew/RTL content..."
          # Check for Hebrew text files
          if find . -name "*.ts" -o -name "*.tsx" | xargs grep -l "[א-ת]" 2>/dev/null; then
            echo "✅ Hebrew content found - validating encoding..."
            find . -name "*.ts" -o -name "*.tsx" | xargs grep -l "[א-ת]" | while read file; do
              if ! file "$file" | grep -q "UTF-8"; then
                echo "❌ File $file is not UTF-8 encoded"
                exit 1
              fi
            done
            echo "✅ Hebrew content validation passed"
          else
            echo "ℹ️  No Hebrew content found"
          fi

  # ================================================================================================
  # 🧪 TESTING
  # ================================================================================================
  
  test:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: setup
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .turbo
          key: ${{ needs.setup.outputs.node-cache-key }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          echo "🧪 Running ${{ matrix.test-type }} tests..."
          npm run test:${{ matrix.test-type }}
        env:
          CI: true

      - name: 📊 Upload test coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella

  # ================================================================================================
  # 🎭 E2E TESTING
  # ================================================================================================
  
  e2e-test:
    name: 🎭 E2E Testing
    runs-on: ubuntu-latest
    needs: [setup, typecheck-and-lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .turbo
          key: ${{ needs.setup.outputs.node-cache-key }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Run E2E tests
        run: |
          echo "🎭 Running E2E tests with Hebrew locale..."
          npm run test:e2e
        env:
          CI: true
          PLAYWRIGHT_LOCALE: he-IL

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ================================================================================================
  # 🔒 SECURITY & AUDIT
  # ================================================================================================
  
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 NPM security audit
        run: |
          echo "🔒 Running security audit..."
          npm run security:audit

      - name: 🔍 Check for secrets
        run: |
          echo "🔍 Scanning for potential secrets..."
          
          # Check for common secret patterns
          if git log --oneline -1 | grep -iE "(password|secret|key|token)" > /dev/null; then
            echo "⚠️  Commit message contains sensitive keywords"
          fi
          
          # Check staged files for secrets
          SECRET_PATTERNS=(
            "password\s*[:=]\s*['\"][^'\"]+['\"]"
            "secret\s*[:=]\s*['\"][^'\"]+['\"]"
            "api[_-]?key\s*[:=]\s*['\"][^'\"]+['\"]"
            "private[_-]?key"
          )
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if git diff HEAD~1 | grep -iE "$pattern" > /dev/null; then
              echo "❌ Potential secret detected: $pattern"
              exit 1
            fi
          done
          
          echo "✅ No secrets detected"

      - name: 🎓 Academic platform security check
        run: |
          echo "🎓 Running academic platform specific security checks..."
          
          # Check for BGU credentials in code
          if grep -r "bgu\.ac\.il" --include="*.ts" --include="*.tsx" --include="*.js" . | grep -v "example\|test\|spec" > /dev/null; then
            echo "⚠️  BGU domain references found in code - ensure no credentials are exposed"
          fi
          
          # Check for student ID patterns
          if grep -rE "[0-9]{9}" --include="*.ts" --include="*.tsx" . | grep -v "test\|spec\|example" > /dev/null; then
            echo "⚠️  Potential student ID patterns found - ensure privacy compliance"
          fi
          
          echo "✅ Academic platform security check completed"

  # ================================================================================================
  # 📦 BUILD & DEPLOYMENT
  # ================================================================================================
  
  build:
    name: 📦 Build & Deploy Preview
    runs-on: ubuntu-latest
    needs: [typecheck-and-lint, test]
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .turbo
          key: ${{ needs.setup.outputs.node-cache-key }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: |
          echo "🏗️ Building Spike academic platform..."
          npm run build
        env:
          NODE_ENV: production

      - name: 📊 Analyze bundle size
        run: |
          echo "📊 Analyzing bundle size..."
          if [ -d ".next" ]; then
            du -sh .next
            echo "📦 Bundle analysis completed"
          fi

      - name: 🌐 Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web

      - name: 🚀 Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./apps/web

  # ================================================================================================
  # 🐍 PYTHON SCRAPER VALIDATION
  # ================================================================================================
  
  scraper-validation:
    name: 🐍 Python Scraper Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'apps/scraper/') || contains(github.event.head_commit.modified, 'spike-analyzer/')
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python dependencies
        run: |
          if [ -f "apps/scraper/requirements.txt" ]; then
            pip install -r apps/scraper/requirements.txt
          fi
          if [ -f "spike-analyzer/requirements.txt" ]; then
            pip install -r spike-analyzer/requirements.txt
          fi

      - name: 🔍 Python linting (flake8)
        run: |
          pip install flake8
          echo "🔍 Running Python linting..."
          find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | xargs flake8 --max-line-length=100

      - name: 🧪 Python tests
        run: |
          echo "🧪 Running Python scraper tests..."
          # Add Python tests here when available

  # ================================================================================================
  # 🏁 FINAL STATUS
  # ================================================================================================
  
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [typecheck-and-lint, test, security, build]
    if: always()
    
    steps:
      - name: 🎯 Check all jobs status
        run: |
          echo "🎓 Spike Academic Platform - CI/CD Summary"
          echo "======================================"
          echo "TypeCheck & Lint: ${{ needs.typecheck-and-lint.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.typecheck-and-lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.security.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ CI failed - check failed jobs"
            exit 1
          else
            echo "✅ All CI checks passed!"
            echo "🎯 Spike Academic Platform is ready!"
          fi
