apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: spike-phase2
  labels:
    app: analytics-service
    service: analytics
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: analytics-service
  template:
    metadata:
      labels:
        app: analytics-service
        service: analytics
        version: v1.0.0
    spec:
      containers:
      - name: analytics-service
        image: spike/analytics-service:latest
        ports:
        - containerPort: 8004
        env:
        - name: REDIS_URL
          value: "redis://redis.spike-infrastructure:6379"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: analytics-service-url
        - name: ASYNC_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: analytics-service-async-url
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: amqp-url
        - name: AUTH_SERVICE_URL
          value: "http://auth-service.spike-phase1:8001"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: spike-phase2
  labels:
    app: analytics-service
    service: analytics
spec:
  selector:
    app: analytics-service
  ports:
  - port: 8004
    targetPort: 8004
    name: http
  type: ClusterIP

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: analytics-refresh-views
  namespace: spike-phase2
spec:
  schedule: "*/10 * * * *"  # Every 10 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: refresh-views
            image: spike/analytics-service:latest
            command: ["python", "-c", "
              import asyncio
              import httpx
              async def refresh():
                  async with httpx.AsyncClient() as client:
                      await client.post('http://analytics-service:8004/materialized-views/refresh?tenant_id=bgu')
                      await client.post('http://analytics-service:8004/materialized-views/refresh?tenant_id=tau')
                      await client.post('http://analytics-service:8004/materialized-views/refresh?tenant_id=huji')
              asyncio.run(refresh())
            "]
          restartPolicy: OnFailure

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: analytics-service-hpa
  namespace: spike-phase2
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: analytics-service
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80