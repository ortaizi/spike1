apiVersion: apps/v1
kind: Deployment
metadata:
  name: academic-service
  namespace: spike-platform
  labels:
    app: academic-service
    service: academic-service
    version: v1
    tenant: multi
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: academic-service
  template:
    metadata:
      labels:
        app: academic-service
        service: academic-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8003"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: academic-service
      containers:
      - name: academic-service
        image: spike-platform/academic-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8003"
        - name: SERVICE_NAME
          value: "academic-service"
        - name: SERVICE_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['version']
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: port
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: observability-config
              key: jaeger-endpoint
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: academic-service-config
              key: log-level
              optional: true
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: academic-service-config
              key: cors-origins
              optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: temp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: temp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: logs-volume
        emptyDir:
          sizeLimit: 1Gi
      nodeSelector:
        kubernetes.io/os: linux
        node-type: application
      tolerations:
      - key: "high-memory"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: academic-service
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: ["application"]
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: academic-service
  namespace: spike-platform
  labels:
    app: academic-service
    service: academic-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8003
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: academic-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: academic-service
  namespace: spike-platform
  labels:
    app: academic-service
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: academic-service
  namespace: spike-platform
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: academic-service
  namespace: spike-platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: academic-service
subjects:
- kind: ServiceAccount
  name: academic-service
  namespace: spike-platform

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: academic-service-config
  namespace: spike-platform
  labels:
    app: academic-service
data:
  log-level: "info"
  cors-origins: "https://bgu.spike-platform.com,https://tau.spike-platform.com,https://huji.spike-platform.com"
  cache-ttl: "300"
  max-query-depth: "10"
  rate-limit-requests: "1000"
  rate-limit-window: "900"

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: academic-service-hpa
  namespace: spike-platform
  labels:
    app: academic-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: academic-service
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: academic-service-pdb
  namespace: spike-platform
  labels:
    app: academic-service
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: academic-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: academic-service-netpol
  namespace: spike-platform
  labels:
    app: academic-service
spec:
  podSelector:
    matchLabels:
      app: academic-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: api-gateway
    - namespaceSelector:
        matchLabels:
          name: spike-platform
      podSelector:
        matchLabels:
          app: sync-orchestrator
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8003
    - protocol: TCP
      port: 9090
  egress:
  # Database access
  - to:
    - namespaceSelector:
        matchLabels:
          name: infrastructure
      podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  # Redis access
  - to:
    - namespaceSelector:
        matchLabels:
          name: infrastructure
      podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # RabbitMQ access
  - to:
    - namespaceSelector:
        matchLabels:
          name: infrastructure
      podSelector:
        matchLabels:
          app: rabbitmq
    ports:
    - protocol: TCP
      port: 5672
    - protocol: TCP
      port: 15672
  # Inter-service communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: spike-platform
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 8002
    - protocol: TCP
      port: 8004
  # DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # HTTPS outbound (for external services)
  - to: []
    ports:
    - protocol: TCP
      port: 443