# Phase 4: Production Deployment Configuration
# Complete production-ready deployment for Spike Platform microservices

apiVersion: v1
kind: Namespace
metadata:
  name: spike-production
  labels:
    environment: production
    platform: spike
    istio-injection: enabled

---
# Production-grade configuration map
apiVersion: v1
kind: ConfigMap
metadata:
  name: spike-production-config
  namespace: spike-production
data:
  # Environment configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"

  # Database configuration
  DB_POOL_SIZE: "20"
  DB_MAX_CONNECTIONS: "50"
  DB_IDLE_TIMEOUT: "300000"
  DB_CONNECTION_TIMEOUT: "10000"

  # Redis configuration
  REDIS_MAX_CONNECTIONS: "100"
  REDIS_CLUSTER_MODE: "true"
  CACHE_TTL: "300"

  # Service discovery
  SERVICE_MESH_ENABLED: "true"
  CIRCUIT_BREAKER_ENABLED: "true"

  # Monitoring
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
  HEALTH_CHECK_INTERVAL: "30"

  # Rate limiting
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_MAX_REQUESTS: "1000"
  RATE_LIMIT_WINDOW: "60"

  # Multi-tenancy
  TENANT_ISOLATION_ENABLED: "true"
  TENANT_RESOURCE_LIMITS: "true"

---
# Auth Service - Production Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: spike-production
  labels:
    app: auth-service
    version: v1.0.0
    environment: production
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: auth-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: auth-service
        image: registry.spike-platform.com/auth-service:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        env:
        - name: PORT
          value: "8080"
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: spike-production-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: auth-db-credentials
              key: url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: auth-secrets
              key: jwt-secret
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oauth-credentials
              key: google-client-id
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth-credentials
              key: google-client-secret
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-credentials
              key: token
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: tls-certs
          mountPath: /etc/tls
          readOnly: true
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: tls-certs
        secret:
          secretName: auth-service-tls
      - name: config
        configMap:
          name: spike-production-config

---
# Academic Service - Production Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: academic-service
  namespace: spike-production
  labels:
    app: academic-service
    version: v1.0.0
    environment: production
spec:
  replicas: 8
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 2
  selector:
    matchLabels:
      app: academic-service
  template:
    metadata:
      labels:
        app: academic-service
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: academic-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: academic-service
        image: registry.spike-platform.com/academic-service:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: spike-production-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: academic-db-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Analytics Service - Production Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: spike-production
  labels:
    app: analytics-service
    version: v1.0.0
    environment: production
spec:
  replicas: 6
  selector:
    matchLabels:
      app: analytics-service
  template:
    metadata:
      labels:
        app: analytics-service
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: analytics-service
      containers:
      - name: analytics-service
        image: registry.spike-platform.com/analytics-service:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: spike-production-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: analytics-db-credentials
              key: url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Notification Service - Production Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: spike-production
  labels:
    app: notification-service
    version: v1.0.0
    environment: production
spec:
  replicas: 4
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: notification-service
      containers:
      - name: notification-service
        image: registry.spike-platform.com/notification-service:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: spike-production-config
              key: NODE_ENV
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: url
        - name: SMTP_HOST
          valueFrom:
            secretKeyRef:
              name: smtp-credentials
              key: host
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: smtp-credentials
              key: user
        - name: SMTP_PASS
          valueFrom:
            secretKeyRef:
              name: smtp-credentials
              key: password
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
# Sync Orchestrator - Production Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sync-orchestrator
  namespace: spike-production
  labels:
    app: sync-orchestrator
    version: v1.0.0
    environment: production
spec:
  replicas: 6
  selector:
    matchLabels:
      app: sync-orchestrator
  template:
    metadata:
      labels:
        app: sync-orchestrator
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sync-orchestrator
      containers:
      - name: sync-orchestrator
        image: registry.spike-platform.com/sync-orchestrator:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: spike-production-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: sync-db-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---
# University Integration Service - Production Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: university-integration
  namespace: spike-production
  labels:
    app: university-integration
    version: v1.0.0
    environment: production
spec:
  replicas: 4
  selector:
    matchLabels:
      app: university-integration
  template:
    metadata:
      labels:
        app: university-integration
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: university-integration
      containers:
      - name: university-integration
        image: registry.spike-platform.com/university-integration:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: spike-production-config
              key: NODE_ENV
        - name: PLAYWRIGHT_BROWSERS_PATH
          value: "/playwright-browsers"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"

---
# Tenant Service - Production Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-service
  namespace: spike-production
  labels:
    app: tenant-service
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tenant-service
  template:
    metadata:
      labels:
        app: tenant-service
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: tenant-service
      containers:
      - name: tenant-service
        image: registry.spike-platform.com/tenant-service:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: spike-production-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: tenant-db-credentials
              key: url
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
# Production Services
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: spike-production
  labels:
    app: auth-service
spec:
  selector:
    app: auth-service
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  - port: 8443
    targetPort: 8443
    name: https

---
apiVersion: v1
kind: Service
metadata:
  name: academic-service
  namespace: spike-production
  labels:
    app: academic-service
spec:
  selector:
    app: academic-service
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: spike-production
  labels:
    app: analytics-service
spec:
  selector:
    app: analytics-service
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: spike-production
  labels:
    app: notification-service
spec:
  selector:
    app: notification-service
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
apiVersion: v1
kind: Service
metadata:
  name: sync-orchestrator
  namespace: spike-production
  labels:
    app: sync-orchestrator
spec:
  selector:
    app: sync-orchestrator
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
apiVersion: v1
kind: Service
metadata:
  name: university-integration
  namespace: spike-production
  labels:
    app: university-integration
spec:
  selector:
    app: university-integration
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
apiVersion: v1
kind: Service
metadata:
  name: tenant-service
  namespace: spike-production
  labels:
    app: tenant-service
spec:
  selector:
    app: tenant-service
  ports:
  - port: 8080
    targetPort: 8080
    name: http

---
# Production Horizontal Pod Autoscalers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-service-hpa
  namespace: spike-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-service
  minReplicas: 5
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: academic-service-hpa
  namespace: spike-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: academic-service
  minReplicas: 8
  maxReplicas: 30
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75

---
# Production Ingress with SSL
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spike-production-ingress
  namespace: spike-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.spike-platform.com
    - bgu.spike-platform.com
    - tau.spike-platform.com
    - huji.spike-platform.com
    secretName: spike-platform-tls
  rules:
  - host: api.spike-platform.com
    http:
      paths:
      - path: /auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 8080
      - path: /academic
        pathType: Prefix
        backend:
          service:
            name: academic-service
            port:
              number: 8080
      - path: /analytics
        pathType: Prefix
        backend:
          service:
            name: analytics-service
            port:
              number: 8080
      - path: /notifications
        pathType: Prefix
        backend:
          service:
            name: notification-service
            port:
              number: 8080
      - path: /sync
        pathType: Prefix
        backend:
          service:
            name: sync-orchestrator
            port:
              number: 8080
      - path: /tenant
        pathType: Prefix
        backend:
          service:
            name: tenant-service
            port:
              number: 8080

---
# Production Network Policies for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: spike-production-network-policy
  namespace: spike-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: spike-production
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: spike-production
  - to:
    - namespaceSelector:
        matchLabels:
          name: infrastructure
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Pod Disruption Budgets for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: auth-service-pdb
  namespace: spike-production
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: auth-service

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: academic-service-pdb
  namespace: spike-production
spec:
  minAvailable: 5
  selector:
    matchLabels:
      app: academic-service

---
# Service Accounts for Production
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service
  namespace: spike-production

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: academic-service
  namespace: spike-production

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: analytics-service
  namespace: spike-production

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: notification-service
  namespace: spike-production

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sync-orchestrator
  namespace: spike-production

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: university-integration
  namespace: spike-production

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tenant-service
  namespace: spike-production