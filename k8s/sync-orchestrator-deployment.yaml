apiVersion: apps/v1
kind: Deployment
metadata:
  name: sync-orchestrator
  namespace: spike-platform
  labels:
    app: sync-orchestrator
    service: sync-orchestrator
    version: v1
    tenant: multi
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sync-orchestrator
  template:
    metadata:
      labels:
        app: sync-orchestrator
        service: sync-orchestrator
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8004"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sync-orchestrator
      containers:
      - name: sync-orchestrator
        image: spike-platform/sync-orchestrator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8004
          name: http
          protocol: TCP
        - containerPort: 9091
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8004"
        - name: SERVICE_NAME
          value: "sync-orchestrator"
        - name: SERVICE_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['version']
        - name: WORKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: port
        - name: DB_NAME
          value: "spike_sync"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        - name: REDIS_DB
          value: "0"
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: observability-config
              key: jaeger-endpoint
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: sync-orchestrator-config
              key: log-level
              optional: true
        - name: MAX_CONCURRENT_JOBS
          valueFrom:
            configMapKeyRef:
              name: sync-orchestrator-config
              key: max-concurrent-jobs
              optional: true
        - name: JOB_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: sync-orchestrator-config
              key: job-timeout
              optional: true
        - name: CLEANUP_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: sync-orchestrator-config
              key: cleanup-interval
              optional: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: temp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: temp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 200Mi
      - name: logs-volume
        emptyDir:
          sizeLimit: 2Gi
      nodeSelector:
        kubernetes.io/os: linux
        node-type: worker
      tolerations:
      - key: "high-cpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: sync-orchestrator
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: ["worker"]
      terminationGracePeriodSeconds: 120

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sync-worker
  namespace: spike-platform
  labels:
    app: sync-worker
    service: sync-orchestrator
    component: worker
    version: v1
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: sync-worker
  template:
    metadata:
      labels:
        app: sync-worker
        service: sync-orchestrator
        component: worker
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9092"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sync-orchestrator
      containers:
      - name: sync-worker
        image: spike-platform/sync-orchestrator:latest
        imagePullPolicy: Always
        command: ["npm", "run", "worker"]
        ports:
        - containerPort: 9092
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: SERVICE_NAME
          value: "sync-worker"
        - name: WORKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: port
        - name: DB_NAME
          value: "spike_sync"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        - name: REDIS_DB
          value: "0"
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: url
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: sync-orchestrator-config
              key: log-level
              optional: true
        - name: WORKER_CONCURRENCY
          valueFrom:
            configMapKeyRef:
              name: sync-orchestrator-config
              key: worker-concurrency
              optional: true
        - name: WORKER_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: sync-orchestrator-config
              key: worker-timeout
              optional: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep -q '[n]ode.*worker' || exit 1"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep -q '[n]ode.*worker' || exit 1"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Workers need write access for scraping
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: temp-volume
          mountPath: /tmp
        - name: work-volume
          mountPath: /app/work
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: temp-volume
        emptyDir: {}
      - name: work-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 2Gi
      nodeSelector:
        kubernetes.io/os: linux
        node-type: worker
      tolerations:
      - key: "high-cpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "scraper-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: sync-worker
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: ["worker"]
      terminationGracePeriodSeconds: 180

---
apiVersion: v1
kind: Service
metadata:
  name: sync-orchestrator
  namespace: spike-platform
  labels:
    app: sync-orchestrator
    service: sync-orchestrator
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8004
    protocol: TCP
    name: http
  - port: 9091
    targetPort: 9091
    protocol: TCP
    name: metrics
  selector:
    app: sync-orchestrator

---
apiVersion: v1
kind: Service
metadata:
  name: sync-worker-metrics
  namespace: spike-platform
  labels:
    app: sync-worker
    service: sync-orchestrator
    component: worker
spec:
  type: ClusterIP
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: metrics
  selector:
    app: sync-worker

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sync-orchestrator-config
  namespace: spike-platform
  labels:
    app: sync-orchestrator
data:
  log-level: "info"
  max-concurrent-jobs: "20"
  worker-concurrency: "3"
  job-timeout: "1800"
  worker-timeout: "3600"
  cleanup-interval: "3600"
  retry-attempts: "3"
  retry-delay: "60"

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sync-worker-hpa
  namespace: spike-platform
  labels:
    app: sync-worker
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sync-worker
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  - type: Object
    object:
      metric:
        name: queue_depth
      describedObject:
        apiVersion: v1
        kind: Service
        name: redis
      target:
        type: Value
        value: "50"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sync-orchestrator-pdb
  namespace: spike-platform
  labels:
    app: sync-orchestrator
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: sync-orchestrator

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sync-worker-pdb
  namespace: spike-platform
  labels:
    app: sync-worker
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sync-worker