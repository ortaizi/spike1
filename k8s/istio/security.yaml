# Istio Security Policies for Spike Platform
# Authorization Policies for secure multi-tenant communication

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: auth-service-policy
  namespace: spike-platform
spec:
  selector:
    matchLabels:
      app: auth-service
  rules:
  # Allow health checks from Kubernetes
  - from:
    - source:
        principals: ["cluster.local/ns/kube-system/sa/default"]
    to:
    - operation:
        paths: ["/health"]
        methods: ["GET"]

  # Allow tenant service to call auth service
  - from:
    - source:
        principals: ["cluster.local/ns/spike-platform/sa/tenant-service"]
    to:
    - operation:
        paths: ["/auth/token/validate", "/auth/session/validate"]
        methods: ["POST"]

  # Allow external traffic through gateway
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        paths: ["/auth/*"]
        methods: ["GET", "POST", "PUT", "DELETE"]

  # Deny all other traffic
  - {}

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: tenant-service-policy
  namespace: spike-platform
spec:
  selector:
    matchLabels:
      app: tenant-service
  rules:
  # Allow health checks
  - from:
    - source:
        principals: ["cluster.local/ns/kube-system/sa/default"]
    to:
    - operation:
        paths: ["/health"]
        methods: ["GET"]

  # Allow authenticated requests from gateway
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        paths: ["/tenants/*", "/provisioning/*", "/resources/*"]
        methods: ["GET", "POST", "PUT", "DELETE"]
    when:
    - key: request.headers[authorization]
      values: ["Bearer *"]

  # Allow internal service communication
  - from:
    - source:
        namespaces: ["spike-platform"]
    to:
    - operation:
        paths: ["/internal/*"]
        methods: ["GET", "POST"]

---
# Network Policies for additional security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-service-netpol
  namespace: spike-platform
spec:
  podSelector:
    matchLabels:
      app: auth-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from Istio gateway
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: istio-proxy
    ports:
    - protocol: TCP
      port: 8001

  # Allow ingress from tenant service
  - from:
    - podSelector:
        matchLabels:
          app: tenant-service
    ports:
    - protocol: TCP
      port: 8001

  # Allow health checks
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8001

  egress:
  # Allow egress to database
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432

  # Allow egress to Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

  # Allow egress to external OAuth providers
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: tenant-service-netpol
  namespace: spike-platform
spec:
  podSelector:
    matchLabels:
      app: tenant-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from Istio gateway
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 8002

  # Allow ingress from other services in the namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: spike-platform
    ports:
    - protocol: TCP
      port: 8002

  egress:
  # Allow egress to database
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432

  # Allow egress to Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

  # Allow egress to Kubernetes API
  - to: []
    ports:
    - protocol: TCP
      port: 6443
    - protocol: TCP
      port: 443

---
# PeerAuthentication for mTLS
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: spike-platform
spec:
  mtls:
    mode: STRICT

---
# Request Authentication for JWT validation
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: spike-jwt-auth
  namespace: spike-platform
spec:
  selector:
    matchLabels:
      app: tenant-service
  jwtRules:
  - issuer: "spike-auth-service"
    jwksUri: "http://auth-service:8001/auth/jwks"
    audiences:
    - "tenant-bgu"
    - "tenant-tau"
    - "tenant-huji"
    outputPayloadToHeader: "x-jwt-payload"

---
# Service-to-service authorization
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: service-to-service
  namespace: spike-platform
spec:
  rules:
  # Allow authenticated inter-service communication
  - from:
    - source:
        namespaces: ["spike-platform"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
    when:
    - key: source.workload
      values: ["auth-service", "tenant-service"]

---
# Tenant isolation policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: tenant-isolation
  namespace: spike-platform
spec:
  rules:
  # BGU tenant can only access BGU resources
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
    when:
    - key: request.headers[x-tenant-id]
      values: ["bgu"]
    - key: destination.labels[tenant]
      values: ["bgu", "shared"]

  # TAU tenant can only access TAU resources
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
    when:
    - key: request.headers[x-tenant-id]
      values: ["tau"]
    - key: destination.labels[tenant]
      values: ["tau", "shared"]

  # HUJI tenant can only access HUJI resources
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
    when:
    - key: request.headers[x-tenant-id]
      values: ["huji"]
    - key: destination.labels[tenant]
      values: ["huji", "shared"]

---
# Rate limiting policy
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: rate-limit-filter
  namespace: spike-platform
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.local_ratelimit
        typed_config:
          "@type": type.googleapis.com/udpa.type.v1.TypedStruct
          type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
          value:
            stat_prefix: local_rate_limiter
            token_bucket:
              max_tokens: 100
              tokens_per_fill: 100
              fill_interval: 60s
            filter_enabled:
              runtime_key: local_rate_limit_enabled
              default_value:
                numerator: 100
                denominator: HUNDRED
            filter_enforced:
              runtime_key: local_rate_limit_enforced
              default_value:
                numerator: 100
                denominator: HUNDRED
            response_headers_to_add:
            - append: false
              header:
                key: x-local-rate-limit
                value: 'true'