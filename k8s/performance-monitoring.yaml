# Phase 4: Performance Monitoring and Optimization
apiVersion: v1
kind: ConfigMap
metadata:
  name: performance-monitoring-config
  namespace: spike-platform
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      # Spike Microservices
      - job_name: 'spike-auth-service'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - spike-platform
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: auth-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: metrics
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        metrics_path: /metrics

      - job_name: 'spike-academic-service'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - spike-platform
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: academic-service
        metrics_path: /metrics

      - job_name: 'spike-notification-service'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - spike-platform
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: notification-service
        metrics_path: /metrics

      - job_name: 'spike-analytics-service'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - spike-platform
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: analytics-service
        metrics_path: /metrics

      - job_name: 'spike-sync-orchestrator'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - spike-platform
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: sync-orchestrator
        metrics_path: /metrics

  alert-rules.yml: |
    groups:
    - name: spike-performance-alerts
      rules:
      # High Response Time Alert
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, http_request_duration_seconds_bucket{job=~"spike-.*"}) > 0.5
        for: 2m
        labels:
          severity: warning
          service: "{{ $labels.job }}"
        annotations:
          summary: "High response time detected for {{ $labels.job }}"
          description: "95th percentile response time is {{ $value }}s for {{ $labels.job }}"

      # High Error Rate Alert
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
        for: 2m
        labels:
          severity: critical
          service: "{{ $labels.job }}"
        annotations:
          summary: "High error rate detected for {{ $labels.job }}"
          description: "Error rate is {{ $value | humanizePercentage }} for {{ $labels.job }}"

      # Database Connection Pool Exhaustion
      - alert: DatabaseConnectionPoolExhaustion
        expr: db_connections_active / db_connections_max > 0.9
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Database connection pool nearly exhausted"
          description: "{{ $value | humanizePercentage }} of database connections in use"

      # Memory Usage Alert
      - alert: HighMemoryUsage
        expr: (container_memory_working_set_bytes / container_spec_memory_limit_bytes) > 0.9
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage for container {{ $labels.container }}"
          description: "Memory usage is {{ $value | humanizePercentage }}"

      # CPU Usage Alert
      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage for container {{ $labels.container }}"
          description: "CPU usage is {{ $value | humanizePercentage }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-server
  namespace: spike-platform
  labels:
    app: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
          name: prometheus
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
      volumes:
      - name: prometheus-config
        configMap:
          name: performance-monitoring-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage-pvc
  namespace: spike-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
  namespace: spike-platform
spec:
  selector:
    app: prometheus-server
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: spike-platform

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: spike-platform