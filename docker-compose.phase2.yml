version: '3.8'

services:
  # =============================================================================
  # Infrastructure Services (Shared)
  # =============================================================================

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgresql:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: spike_platform
      POSTGRES_USER: spike_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spike_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spike_user -d spike_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: spike_user
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-spike_password}
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # =============================================================================
  # Phase 2 Microservices
  # =============================================================================

  university-integration:
    build:
      context: ./services/university-integration
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://spike_user:${POSTGRES_PASSWORD:-spike_password}@postgresql:5432/university_integration
      - RABBITMQ_URL=amqp://spike_user:${RABBITMQ_PASSWORD:-spike_password}@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
      - NOTIFICATION_SERVICE_URL=http://notification-service:8003
    ports:
      - "8002:8002"
    depends_on:
      - redis
      - postgresql
      - rabbitmq
    volumes:
      - university_logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  university-integration-worker:
    build:
      context: ./services/university-integration
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://spike_user:${POSTGRES_PASSWORD:-spike_password}@postgresql:5432/university_integration
      - RABBITMQ_URL=amqp://spike_user:${RABBITMQ_PASSWORD:-spike_password}@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
      - NOTIFICATION_SERVICE_URL=http://notification-service:8003
    depends_on:
      - redis
      - postgresql
      - rabbitmq
      - university-integration
    volumes:
      - university_logs:/app/logs
    command: ["python", "-m", "celery", "worker", "-A", "src.tasks.scraping_tasks", "--loglevel=info", "--concurrency=4"]
    restart: unless-stopped

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://spike_user:${POSTGRES_PASSWORD:-spike_password}@postgresql:5432/notification_service
      - RABBITMQ_URL=amqp://spike_user:${RABBITMQ_PASSWORD:-spike_password}@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
      # Email configuration
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL:-no-reply@spike-platform.com}
      # SMS configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      # Push notification configuration
      - FIREBASE_SERVER_KEY=${FIREBASE_SERVER_KEY}
      - APPLE_PUSH_CERT_PATH=${APPLE_PUSH_CERT_PATH}
    ports:
      - "8003:8003"
    depends_on:
      - redis
      - postgresql
      - rabbitmq
    volumes:
      - notification_logs:/app/logs
      - ./services/notification-service/src/templates:/app/src/templates
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://spike_user:${POSTGRES_PASSWORD:-spike_password}@postgresql:5432/analytics_service
      - ASYNC_DATABASE_URL=postgresql+asyncpg://spike_user:${POSTGRES_PASSWORD:-spike_password}@postgresql:5432/analytics_service
      - RABBITMQ_URL=amqp://spike_user:${RABBITMQ_PASSWORD:-spike_password}@rabbitmq:5672/
      - AUTH_SERVICE_URL=http://auth-service:8001
    ports:
      - "8004:8004"
    depends_on:
      - redis
      - postgresql
      - rabbitmq
    volumes:
      - analytics_logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8004/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # API Gateway (Phase 1 service - assumed to exist)
  # =============================================================================

  api-gateway:
    image: spike/api-gateway:latest
    environment:
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8001
      - UNIVERSITY_INTEGRATION_URL=http://university-integration:8002
      - NOTIFICATION_SERVICE_URL=http://notification-service:8003
      - ANALYTICS_SERVICE_URL=http://analytics-service:8004
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - university-integration
      - notification-service
      - analytics-service
    restart: unless-stopped

  # =============================================================================
  # Auth Service (Phase 1 service - assumed to exist)
  # =============================================================================

  auth-service:
    image: spike/auth-service:latest
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://spike_user:${POSTGRES_PASSWORD:-spike_password}@postgresql:5432/auth_service
    ports:
      - "8001:8001"
    depends_on:
      - redis
      - postgresql
    restart: unless-stopped

  # =============================================================================
  # Monitoring and Observability
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
    volumes:
      - jaeger_data:/badger

# =============================================================================
# Volumes
# =============================================================================

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  university_logs:
    driver: local
  notification_logs:
    driver: local
  analytics_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local

# =============================================================================
# Networks
# =============================================================================

networks:
  default:
    name: spike-platform
    driver: bridge