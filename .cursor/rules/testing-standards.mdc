# Testing Standards for Spike

## 🧪 Testing Strategy
- **Unit Tests**: Test individual functions and components
- **Integration Tests**: Test API endpoints and database interactions
- **E2E Tests**: Test complete user workflows
- **Visual Regression Tests**: Test UI consistency
- **Performance Tests**: Test application performance

## 📊 Testing Tools
- **Unit/Integration**: Vitest + React Testing Library
- **E2E**: Playwright
- **API Testing**: Supertest
- **Visual Testing**: Playwright Visual Comparisons
- **Performance**: Lighthouse CI

## 🔧 Unit Testing Setup
```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    setupFiles: ['./src/test/setup.ts'],
    globals: true,
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
});

// src/test/setup.ts
import '@testing-library/jest-dom';
import { vi } from 'vitest';

// Mock Next.js router
vi.mock('next/router', () => ({
  useRouter: () => ({
    push: vi.fn(),
    replace: vi.fn(),
    prefetch: vi.fn(),
    back: vi.fn(),
    reload: vi.fn(),
    pathname: '/',
    query: {},
    asPath: '/',
  }),
}));

// Mock NextAuth
vi.mock('next-auth/react', () => ({
  useSession: () => ({
    data: null,
    status: 'unauthenticated',
  }),
  signIn: vi.fn(),
  signOut: vi.fn(),
}));
```

## 🧪 Component Testing
```typescript
// components/__tests__/assignment-card.test.tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { AssignmentCard } from '../assignment-card';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

const mockAssignment = {
  id: '1',
  title: 'מטלה ראשונה',
  description: 'תיאור המטלה',
  courseId: 'course-1',
  dueDate: '2024-01-15T10:00:00Z',
  priority: 'MEDIUM' as const,
  status: 'PENDING' as const,
  attachments: [],
  createdAt: '2024-01-01T00:00:00Z',
  updatedAt: '2024-01-01T00:00:00Z',
};

const createTestQueryClient = () => new QueryClient({
  defaultOptions: {
    queries: { retry: false },
    mutations: { retry: false },
  },
});

const renderWithQueryClient = (component: React.ReactElement) => {
  const queryClient = createTestQueryClient();
  return render(
    <QueryClientProvider client={queryClient}>
      {component}
    </QueryClientProvider>
  );
};

describe('AssignmentCard', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('renders assignment title and description', () => {
    renderWithQueryClient(<AssignmentCard assignment={mockAssignment} />);
    
    expect(screen.getByText('מטלה ראשונה')).toBeInTheDocument();
    expect(screen.getByText('תיאור המטלה')).toBeInTheDocument();
  });

  it('displays correct priority badge', () => {
    renderWithQueryClient(<AssignmentCard assignment={mockAssignment} />);
    
    const priorityBadge = screen.getByText('MEDIUM');
    expect(priorityBadge).toHaveClass('bg-yellow-100', 'text-yellow-800');
  });

  it('formats due date correctly in Hebrew', () => {
    renderWithQueryClient(<AssignmentCard assignment={mockAssignment} />);
    
    expect(screen.getByText(/תאריך יעד:/)).toBeInTheDocument();
    expect(screen.getByText(/15\/1\/2024/)).toBeInTheDocument();
  });

  it('calls onUpdate when update button is clicked', async () => {
    const onUpdate = vi.fn();
    renderWithQueryClient(
      <AssignmentCard assignment={mockAssignment} onUpdate={onUpdate} />
    );
    
    const updateButton = screen.getByText('עדכן');
    fireEvent.click(updateButton);
    
    await waitFor(() => {
      expect(onUpdate).toHaveBeenCalledWith('1');
    });
  });

  it('shows confirmation dialog when delete button is clicked', () => {
    const onDelete = vi.fn();
    const confirmSpy = vi.spyOn(window, 'confirm').mockReturnValue(false);
    
    renderWithQueryClient(
      <AssignmentCard assignment={mockAssignment} onDelete={onDelete} />
    );
    
    const deleteButton = screen.getByText('מחק');
    fireEvent.click(deleteButton);
    
    expect(confirmSpy).toHaveBeenCalledWith('האם אתה בטוח שברצונך למחוק מטלה זו?');
    expect(onDelete).not.toHaveBeenCalled();
  });

  it('handles loading state correctly', async () => {
    renderWithQueryClient(<AssignmentCard assignment={mockAssignment} />);
    
    const updateButton = screen.getByText('עדכן');
    fireEvent.click(updateButton);
    
    await waitFor(() => {
      expect(updateButton).toBeDisabled();
    });
  });
});
```

## 🔌 API Testing
```typescript
// api/__tests__/assignments.test.ts
import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { GET, POST, PUT, DELETE } from '../assignments/route';
import { createMocks } from 'node-mocks-http';
import { prisma } from '@/lib/prisma';

// Mock Prisma
vi.mock('@/lib/prisma', () => ({
  prisma: {
    assignment: {
      findMany: vi.fn(),
      findUnique: vi.fn(),
      create: vi.fn(),
      update: vi.fn(),
      delete: vi.fn(),
    },
  },
}));

describe('/api/assignments', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  afterEach(async () => {
    await prisma.$disconnect();
  });

  describe('GET', () => {
    it('returns assignments for authenticated user', async () => {
      const mockAssignments = [
        {
          id: '1',
          title: 'מטלה ראשונה',
          description: 'תיאור המטלה',
          courseId: 'course-1',
          dueDate: new Date('2024-01-15'),
          priority: 'MEDIUM',
          status: 'PENDING',
          attachments: [],
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ];

      (prisma.assignment.findMany as any).mockResolvedValue(mockAssignments);

      const { req } = createMocks({
        method: 'GET',
        headers: {
          'authorization': 'Bearer valid-token',
        },
      });

      const response = await GET(req);
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      expect(data.data).toEqual(mockAssignments);
    });

    it('returns 401 for unauthenticated user', async () => {
      const { req } = createMocks({
        method: 'GET',
      });

      const response = await GET(req);
      const data = await response.json();

      expect(response.status).toBe(401);
      expect(data.error).toBe('Unauthorized');
    });
  });

  describe('POST', () => {
    it('creates new assignment with valid data', async () => {
      const newAssignment = {
        title: 'מטלה חדשה',
        description: 'תיאור מטלה חדשה',
        courseId: 'course-1',
        dueDate: '2024-01-20T10:00:00Z',
        priority: 'HIGH',
      };

      const createdAssignment = {
        id: '2',
        ...newAssignment,
        status: 'PENDING',
        attachments: [],
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      (prisma.assignment.create as any).mockResolvedValue(createdAssignment);

      const { req } = createMocks({
        method: 'POST',
        body: newAssignment,
        headers: {
          'authorization': 'Bearer valid-token',
          'content-type': 'application/json',
        },
      });

      const response = await POST(req);
      const data = await response.json();

      expect(response.status).toBe(201);
      expect(data.success).toBe(true);
      expect(data.data.title).toBe('מטלה חדשה');
    });

    it('returns 400 for invalid data', async () => {
      const invalidAssignment = {
        title: '', // Empty title should fail validation
        courseId: 'course-1',
      };

      const { req } = createMocks({
        method: 'POST',
        body: invalidAssignment,
        headers: {
          'authorization': 'Bearer valid-token',
          'content-type': 'application/json',
        },
      });

      const response = await POST(req);
      const data = await response.json();

      expect(response.status).toBe(400);
      expect(data.error).toBe('Validation failed');
    });
  });
});
```

## 🎭 E2E Testing
```typescript
// e2e/assignment-management.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Assignment Management', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to assignments page
    await page.goto('/assignments');
    
    // Mock authentication
    await page.addInitScript(() => {
      window.localStorage.setItem('auth-token', 'mock-token');
    });
  });

  test('user can create a new assignment', async ({ page }) => {
    // Click create assignment button
    await page.click('[data-testid="create-assignment-btn"]');
    
    // Fill assignment form
    await page.fill('[data-testid="assignment-title"]', 'מטלה חדשה');
    await page.fill('[data-testid="assignment-description"]', 'תיאור מטלה חדשה');
    await page.selectOption('[data-testid="assignment-course"]', 'course-1');
    await page.fill('[data-testid="assignment-due-date"]', '2024-01-20');
    await page.selectOption('[data-testid="assignment-priority"]', 'HIGH');
    
    // Submit form
    await page.click('[data-testid="submit-assignment"]');
    
    // Verify assignment was created
    await expect(page.locator('text=מטלה חדשה')).toBeVisible();
    await expect(page.locator('text=תיאור מטלה חדשה')).toBeVisible();
  });

  test('user can update assignment status', async ({ page }) => {
    // Find and click update button for first assignment
    await page.click('[data-testid="assignment-1-update"]');
    
    // Change status to in progress
    await page.selectOption('[data-testid="assignment-status"]', 'IN_PROGRESS');
    
    // Save changes
    await page.click('[data-testid="save-assignment"]');
    
    // Verify status was updated
    await expect(page.locator('[data-testid="assignment-1-status"]')).toHaveText('בתהליך');
  });

  test('user can delete assignment with confirmation', async ({ page }) => {
    // Click delete button
    await page.click('[data-testid="assignment-1-delete"]');
    
    // Confirm deletion
    await page.click('[data-testid="confirm-delete"]');
    
    // Verify assignment was removed
    await expect(page.locator('text=מטלה ראשונה')).not.toBeVisible();
  });

  test('assignment list shows correct Hebrew dates', async ({ page }) => {
    // Check that dates are formatted in Hebrew
    const dateElement = page.locator('[data-testid="assignment-1-due-date"]');
    await expect(dateElement).toContainText('15/1/2024');
  });
});
```

## 🎨 Visual Testing
```typescript
// e2e/visual.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Visual Regression Tests', () => {
  test('assignment card looks correct', async ({ page }) => {
    await page.goto('/assignments');
    
    // Take screenshot of assignment card
    const assignmentCard = page.locator('[data-testid="assignment-card"]').first();
    await expect(assignmentCard).toHaveScreenshot('assignment-card.png');
  });

  test('dashboard layout is consistent', async ({ page }) => {
    await page.goto('/dashboard');
    
    // Take full page screenshot
    await expect(page).toHaveScreenshot('dashboard-full.png', {
      fullPage: true,
    });
  });

  test('mobile layout is responsive', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('/assignments');
    
    await expect(page).toHaveScreenshot('assignments-mobile.png');
  });
});
```

## ⚡ Performance Testing
```typescript
// e2e/performance.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Performance Tests', () => {
  test('page load time is under 3 seconds', async ({ page }) => {
    const startTime = Date.now();
    await page.goto('/dashboard');
    const loadTime = Date.now() - startTime;
    
    expect(loadTime).toBeLessThan(3000);
  });

  test('API response time is under 200ms', async ({ page }) => {
    // Navigate to page that triggers API call
    await page.goto('/assignments');
    
    // Wait for API response
    const response = await page.waitForResponse('**/api/assignments');
    const responseTime = response.timing().responseEnd - response.timing().requestStart;
    
    expect(responseTime).toBeLessThan(200);
  });

  test('Core Web Vitals are good', async ({ page }) => {
    await page.goto('/dashboard');
    
    // Measure Core Web Vitals
    const metrics = await page.evaluate(() => {
      return new Promise((resolve) => {
        new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lcp = entries.find(entry => entry.entryType === 'largest-contentful-paint');
          const fid = entries.find(entry => entry.entryType === 'first-input');
          const cls = entries.find(entry => entry.entryType === 'layout-shift');
          
          resolve({
            lcp: lcp?.startTime || 0,
            fid: fid?.processingStart || 0,
            cls: cls?.value || 0,
          });
        }).observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] });
      });
    });
    
    expect(metrics.lcp).toBeLessThan(2500); // LCP should be under 2.5s
    expect(metrics.fid).toBeLessThan(100);   // FID should be under 100ms
    expect(metrics.cls).toBeLessThan(0.1);   // CLS should be under 0.1
  });
});
```

## 🔧 Test Utilities
```typescript
// test-utils/test-helpers.ts
import { render, RenderOptions } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactElement } from 'react';

const createTestQueryClient = () => new QueryClient({
  defaultOptions: {
    queries: { retry: false },
    mutations: { retry: false },
  },
});

interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
  queryClient?: QueryClient;
}

export function renderWithProviders(
  ui: ReactElement,
  options: CustomRenderOptions = {}
) {
  const { queryClient = createTestQueryClient(), ...renderOptions } = options;
  
  function Wrapper({ children }: { children: React.ReactNode }) {
    return (
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    );
  }
  
  return {
    ...render(ui, { wrapper: Wrapper, ...renderOptions }),
    queryClient,
  };
}

// Mock data factories
export const createMockAssignment = (overrides = {}) => ({
  id: '1',
  title: 'מטלה ראשונה',
  description: 'תיאור המטלה',
  courseId: 'course-1',
  dueDate: '2024-01-15T10:00:00Z',
  priority: 'MEDIUM' as const,
  status: 'PENDING' as const,
  attachments: [],
  createdAt: '2024-01-01T00:00:00Z',
  updatedAt: '2024-01-01T00:00:00Z',
  ...overrides,
});

export const createMockCourse = (overrides = {}) => ({
  id: 'course-1',
  code: '201-1-1234',
  name: 'מבוא למדעי המחשב',
  nameEn: 'Introduction to Computer Science',
  description: 'קורס מבוא למדעי המחשב',
  credits: 4,
  semester: 'א',
  academicYear: 2024,
  faculty: 'הפקולטה למדעי הטבע',
  department: 'מדעי המחשב',
  instructor: 'ד"ר ישראל ישראלי',
  isActive: true,
  createdAt: '2024-01-01T00:00:00Z',
  updatedAt: '2024-01-01T00:00:00Z',
  ...overrides,
});
```

## 📊 Test Coverage
```json
// package.json scripts
{
  "scripts": {
    "test": "vitest",
    "test:coverage": "vitest --coverage",
    "test:ui": "vitest --ui",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:visual": "playwright test --grep 'Visual'",
    "test:performance": "playwright test --grep 'Performance'"
  }
}
```

## 🚨 Testing Best Practices
- Write tests before implementing features (TDD)
- Test user behavior, not implementation details
- Use descriptive test names in Hebrew when appropriate
- Mock external dependencies
- Test error scenarios
- Keep tests fast and reliable
- Use data-testid attributes for reliable element selection
- Test accessibility features
- Test RTL layout and Hebrew text rendering
---
globs: *.test.ts,*.test.tsx,*.spec.ts,*.spec.tsx,*.test.js,*.spec.js
---
