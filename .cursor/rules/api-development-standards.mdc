# API Development Standards for Spike

## üèóÔ∏è API Architecture
- Use Next.js API Routes for simple endpoints
- Use Express.js microservice for complex operations
- Implement RESTful conventions
- Use proper HTTP status codes
- Include comprehensive error handling

## üìù API Response Format
```typescript
// Standard success response
interface ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string;
  timestamp: string;
}

// Standard error response
interface ApiError {
  success: false;
  error: {
    code: string;
    message: string;
    details?: any;
  };
  timestamp: string;
}

// Example implementation
export function createApiResponse<T>(
  data: T, 
  message?: string
): ApiResponse<T> {
  return {
    success: true,
    data,
    message,
    timestamp: new Date().toISOString()
  };
}
```

## üîê Authentication & Authorization
```typescript
// Use NextAuth.js for authentication
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";

// Protected API route
export async function GET(request: Request) {
  const session = await getServerSession(authOptions);
  
  if (!session) {
    return Response.json(
      { error: "Unauthorized" },
      { status: 401 }
    );
  }
  
  // Route logic here
}
```

## ‚úÖ Input Validation
```typescript
// Use Zod for validation
import { z } from "zod";

const AssignmentSchema = z.object({
  title: z.string().min(1, "Title is required"),
  description: z.string().optional(),
  dueDate: z.string().datetime(),
  courseId: z.string().uuid(),
  priority: z.enum(["low", "medium", "high"]).default("medium")
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const validatedData = AssignmentSchema.parse(body);
    
    // Process validated data
  } catch (error) {
    if (error instanceof z.ZodError) {
      return Response.json(
        { error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }
  }
}
```

## üö® Error Handling
```typescript
// Centralized error handler
export class ApiError extends Error {
  constructor(
    public statusCode: number,
    public message: string,
    public code?: string
  ) {
    super(message);
    this.name = "ApiError";
  }
}

// Error handler middleware
export function handleApiError(error: unknown) {
  if (error instanceof ApiError) {
    return Response.json(
      {
        success: false,
        error: {
          code: error.code || "UNKNOWN_ERROR",
          message: error.message
        },
        timestamp: new Date().toISOString()
      },
      { status: error.statusCode }
    );
  }
  
  console.error("Unexpected error:", error);
  return Response.json(
    {
      success: false,
      error: {
        code: "INTERNAL_SERVER_ERROR",
        message: "An unexpected error occurred"
      },
      timestamp: new Date().toISOString()
    },
    { status: 500 }
  );
}
```

## üìä Rate Limiting
```typescript
// Implement rate limiting with Upstash Redis
import { Ratelimit } from "@upstash/ratelimit";
import { Redis } from "@upstash/redis";

const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.slidingWindow(10, "1 m"), // 10 requests per minute
});

export async function POST(request: Request) {
  const ip = request.headers.get("x-forwarded-for") || "unknown";
  const { success } = await ratelimit.limit(ip);
  
  if (!success) {
    return Response.json(
      { error: "Rate limit exceeded" },
      { status: 429 }
    );
  }
  
  // Continue with request processing
}
```

## üîç Logging & Monitoring
```typescript
// Structured logging
export function logApiRequest(
  method: string,
  path: string,
  statusCode: number,
  duration: number
) {
  console.log(JSON.stringify({
    level: "info",
    method,
    path,
    statusCode,
    duration,
    timestamp: new Date().toISOString()
  }));
}
```

## üìö Academic-Specific Endpoints
```typescript
// Course management endpoints
export async function GET(request: Request) {
  // GET /api/courses - List courses
  // GET /api/courses/[id] - Get course details
  // POST /api/courses - Create course
  // PUT /api/courses/[id] - Update course
  // DELETE /api/courses/[id] - Delete course
}

// Assignment endpoints
export async function GET(request: Request) {
  // GET /api/assignments - List assignments
  // GET /api/assignments/[id] - Get assignment details
  // POST /api/assignments - Create assignment
  // PUT /api/assignments/[id] - Update assignment
  // DELETE /api/assignments/[id] - Delete assignment
}
```
---
globs: *.ts,*.js
---
