# Interactive Scraping Development Workflow - AI Rules

## üéØ Interactive Development Philosophy

### **Real-Time Validation Approach**
- **NEVER** assume selectors work without testing
- **ALWAYS** show extracted data to developer for confirmation
- **ALWAYS** ask for feedback before proceeding to next step
- **ALWAYS** use real credentials for testing (not mock data)
- **ALWAYS** show console logs during development for transparency

### **Step-by-Step Mapping Process**
1. **Developer provides real credentials** for testing
2. **Cursor connects to BGU Moodle** with provided credentials
3. **Shows extracted data** in console/simple UI for verification
4. **Developer confirms** if data is correct before proceeding
5. **Build selectors incrementally** with real-time validation

## üîß Interactive Development Workflow

### **Phase 1: Interactive Testing**
```javascript
// Example workflow
console.log('üîê Starting BGU Moodle login test...');
const username = await prompt('Enter BGU username: ');
const password = await prompt('Enter BGU password: ');

console.log('üåê Navigating to Moodle...');
// ... login code ...

console.log('üìö Found the following courses:');
courses.forEach(course => {
  console.log(`- ${course.name} (ID: ${course.id})`);
});

const confirm = await prompt('Are these your courses? (y/n): ');
if (confirm === 'y') {
  console.log('‚úÖ Great! Saving selectors...');
} else {
  console.log('‚ùå What\'s wrong? Please describe the issue...');
  const issue = await prompt('Issue description: ');
  // Adjust selectors based on feedback
}
```

### **Phase 2: Step-by-Step Mapping**
- **Developer guides**: "Now click on '◊¶◊ô◊ï◊†◊ô◊ù' (grades)"
- **Cursor extracts and shows**: "Found table with 5 grades: [shows data]"
- **Developer confirms**: "Correct! Save this selector"
- **Build selectors incrementally** with real-time validation

### **Phase 3: Gradual Implementation**
- Start with login and course list only
- Add each feature after confirming previous works
- Test with real data at each step
- Only save to database after developer approval

## üõ†Ô∏è Development Guidelines

### **Console Output Standards**
```javascript
// Use these emoji prefixes for clear console output
console.log('üîê Authentication phase...');
console.log('üåê Navigation phase...');
console.log('üìö Data extraction phase...');
console.log('‚úÖ Success confirmation...');
console.log('‚ùå Error or issue...');
console.log('‚ö†Ô∏è  Warning or adjustment needed...');
console.log('üíæ Saving data...');
console.log('üîÑ Retrying...');
```

### **Hebrew-Friendly Output**
```javascript
// Always show Hebrew text properly
console.log('üìö ◊†◊û◊¶◊ê◊ï ◊î◊ß◊ï◊®◊°◊ô◊ù ◊î◊ë◊ê◊ô◊ù:');
console.log('◊¶◊ô◊ï◊†◊ô◊ù ◊†◊û◊¶◊ê◊ï: 5 ◊¶◊ô◊ï◊†◊ô◊ù');
console.log('◊î◊ê◊ù ◊î◊†◊™◊ï◊†◊ô◊ù ◊†◊õ◊ï◊†◊ô◊ù? (y/n)');
```

### **Interactive Prompts**
```javascript
// Use these prompt patterns
const confirm = await prompt('Are these your courses? (y/n): ');
const issue = await prompt('What\'s wrong? Please describe: ');
const selector = await prompt('What selector should I use? ');
const delay = await prompt('How many seconds delay? (default: 2): ');
```

### **Error Handling**
```javascript
// Always handle errors gracefully
try {
  // scraping code
} catch (error) {
  console.log('‚ùå Error occurred:');
  console.log(error.message);
  const retry = await prompt('Retry? (y/n): ');
  if (retry === 'y') {
    // retry logic
  }
}
```

## üéØ First Task: Login and Show Courses

### **Requirements:**
1. Takes BGU username and password as input
2. Logs into Moodle (https://moodle2.bgu.ac.il/moodle/)
3. Extracts the list of enrolled courses
4. Displays courses in console with:
   - Course name
   - Course ID
   - Professor name (if available)
   - Number of students (if visible)
5. Asks: "Are these your courses? (y/n)"
6. If yes, saves the selectors used
7. If no, asks what's wrong and adjusts

### **Implementation Notes:**
- Use Playwright for handling SSO redirects
- Show all console logs during development
- Add delays between actions so developer can follow along
- Use Hebrew-friendly console output
- Create a simple test file: `test-scraping.js`

## üîß Code Structure

### **Test Script Structure**
```javascript
// test-scraping.js
async function testLogin() {
  console.log('üîê Starting BGU Moodle login test...');
  
  const username = await prompt('Enter BGU username: ');
  const password = await prompt('Enter BGU password: ');
  
  console.log('üåê Navigating to Moodle...');
  // ... login code ...
  
  console.log('üìö Found the following courses:');
  courses.forEach(course => {
    console.log(`- ${course.name} (ID: ${course.id})`);
  });
  
  const confirm = await prompt('Are these your courses? (y/n): ');
  if (confirm === 'y') {
    console.log('‚úÖ Great! Saving selectors...');
  }
}
```

### **Environment Variables**
```javascript
// Use environment variables but allow manual input for testing
const username = process.env.BGU_USERNAME || await prompt('Enter BGU username: ');
const password = process.env.BGU_PASSWORD || await prompt('Enter BGU password: ');
```

### **Easy Execution**
```json
// package.json
{
  "scripts": {
    "test-scrape": "node test-scraping.js"
  }
}
```

## üö® Critical Rules

### **NEVER Do This:**
- ‚ùå Use mock data without real credentials
- ‚ùå Assume selectors work without testing
- ‚ùå Skip developer confirmation
- ‚ùå Hide console logs during development
- ‚ùå Proceed without error handling
- ‚ùå Use hardcoded selectors without validation

### **ALWAYS Do This:**
- ‚úÖ Use real credentials for testing
- ‚úÖ Show extracted data for confirmation
- ‚úÖ Ask for developer feedback
- ‚úÖ Show all console logs during development
- ‚úÖ Handle errors gracefully
- ‚úÖ Use Hebrew-friendly output
- ‚úÖ Add delays for developer visibility
- ‚úÖ Save selectors only after confirmation

### **Development Process:**
1. **Start with login** - Test authentication first
2. **Extract course list** - Show courses for confirmation
3. **Navigate to grades** - Only after courses are confirmed
4. **Extract grades** - Show grades for confirmation
5. **Save selectors** - Only after all data is confirmed correct

## üìä Success Criteria

### **Interactive Testing is Successful When:**
- Developer can see all steps in console
- Extracted data matches developer's expectations
- All Hebrew text displays correctly
- Error handling works gracefully
- Selectors are saved only after confirmation
- Developer can easily retry failed steps

### **Ready for Production When:**
- All selectors are validated with real data
- Error handling covers all edge cases
- Performance is acceptable (reasonable delays)
- Hebrew text processing works correctly
- Database integration is confirmed working

---

**Remember**: The goal is to build a reliable scraping system through interactive validation. Every selector should be tested with real data before being used in production.
description:
globs:
alwaysApply: false
---
