"use client"

import React, { useState, useEffect, Suspense } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { useRouter } from "next/navigation"
import {
  Eye,
  EyeOff,
  User,
  Lock,
  GraduationCap,
  Home,
  CheckCircle,
  AlertCircle,
  Loader2,
  Zap,
  X,
  ExternalLink,
  Shield,
  Clock,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { useAuth } from "../../../lib/auth/auth-context"

// Error Boundary for Auth Page
class AuthErrorBoundary extends React.Component<any, { hasError: boolean; error: Error | null }> {
  constructor(props: any) {
    super(props)
    this.state = { hasError: false, error: null }
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: any) {
    console.error('Auth page error:', error, errorInfo)
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
          <div className="text-center p-8">
            <h1 className="text-2xl font-bold text-gray-900 mb-4">שגיאה בטעינת דף ההתחברות</h1>
            <p className="text-gray-600 mb-4">אירעה שגיאה בטעינת דף ההתחברות</p>
            <button 
              onClick={() => window.location.reload()}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"
            >
              נסה שוב
            </button>
          </div>
        </div>
      )
    }

    return this.props.children
  }
}

// Loading Component for Auth
const AuthLoading = () => (
  <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
    <div className="text-center">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
      <p className="text-gray-600">טוען דף התחברות...</p>
    </div>
  </div>
)

interface FormErrors {
  username?: string
  password?: string
  universityId?: string
}

export default function AuthPage() {
  const { login, universities, isLoading, isInitializing } = useAuth()
  const router = useRouter()
  
  const [showPassword, setShowPassword] = useState(false)
  const [showSuccess, setShowSuccess] = useState(false)
  const [showForgotPasswordModal, setShowForgotPasswordModal] = useState(false)
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    universityId: "",
    rememberMe: false,
  })
  const [errors, setErrors] = useState<FormErrors>({})
  const [touchedFields, setTouchedFields] = useState<Set<string>>(new Set())

  // Real-time validation
  useEffect(() => {
    try {
      const newErrors: FormErrors = {}

      if (touchedFields.has("username") && formData.username) {
        if (formData.username.length < 3) {
          newErrors.username = "שם משתמש חייב להכיל לפחות 3 תווים"
        }
      }

      if (touchedFields.has("password") && formData.password) {
        if (formData.password.length < 6) {
          newErrors.password = "סיסמה חייבת להכיל לפחות 6 תווים"
        }
      }

      if (touchedFields.has("universityId") && !formData.universityId) {
        newErrors.universityId = "יש לבחור מוסד לימוד"
      }

      setErrors(newErrors)
    } catch (error) {
      console.error('Validation error:', error)
    }
  }, [formData, touchedFields])

  const handleFieldBlur = (fieldName: string) => {
    try {
      setTouchedFields((prev) => new Set(prev).add(fieldName))
    } catch (error) {
      console.error('Field blur error:', error)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    try {
      // Mark all fields as touched for validation
      setTouchedFields(new Set(["username", "password", "universityId"]))

      // Check if form is valid
      if (
        Object.keys(errors).length > 0 ||
        !formData.username ||
        !formData.password ||
        !formData.universityId
      ) {
        return
      }

      const result = await login(formData.username, formData.password, formData.universityId)

      if (result.success) {
        setShowSuccess(true)
        setTimeout(() => {
          router.push("/dashboard")
        }, 1500)
      } else {
        setErrors({ password: result.error || "שגיאה בהתחברות" })
      }
    } catch (error) {
      console.error('Submit error:', error)
      setErrors({ password: "שגיאה בהתחברות למערכת" })
    }
  }

  // Show loading only during initial auth check
  if (isInitializing) {
    return <AuthLoading />
  }

  return (
    <Suspense fallback={<AuthLoading />}>
      <AuthErrorBoundary>
        <div className="min-h-screen bg-[#F8F9FA]" dir="rtl" style={{ fontFamily: "Assistant, sans-serif" }} suppressHydrationWarning>
          {/* Header */}
          <header className="bg-white shadow-sm border-b border-gray-100">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="flex justify-between items-center h-16">
                <div className="flex items-center gap-3">
                  <span className="text-2xl font-bold text-gray-900">Spike</span>
                  <Zap className="w-8 h-8 text-[#0066CC] font-bold fill-current" strokeWidth={0} />
                </div>
                <Button 
                  variant="ghost" 
                  className="flex items-center gap-2 text-gray-600 hover:text-[#0066CC]"
                  onClick={() => router.push("/")}
                >
                  <Home className="w-4 h-4" />
                  חזרה לדף הבית
                </Button>
              </div>
            </div>
          </header>

          <div className="flex min-h-[calc(100vh-4rem)]">
            {/* Form Section - Left (60%) */}
            <div className="flex-[0.6] flex items-center justify-center p-8 bg-white">
              <div className="w-full max-w-md">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6 }}
                  className="relative"
                >
                  {/* Overlays */}
                  <AnimatePresence>
                    {showSuccess && (
                      <motion.div
                        key="success"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        className="absolute inset-0 bg-white/95 backdrop-blur-sm flex items-center justify-center z-50 rounded-lg"
                      >
                        <div className="text-center">
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
                          >
                            <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                          </motion.div>
                          <motion.h3
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.4 }}
                            className="text-xl font-semibold text-gray-900 mb-2"
                          >
                            התחברת בהצלחה!
                          </motion.h3>
                          <motion.p
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.6 }}
                            className="text-gray-600"
                          >
                            מעביר אותך למערכת...
                          </motion.p>
                        </div>
                      </motion.div>
                    )}
                    {isLoading && (
                      <motion.div
                        key="loading"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        className="absolute inset-0 bg-white/80 backdrop-blur-[3px] flex items-center justify-center z-40 rounded-lg"
                      >
                        <div className="text-center">
                          <Loader2 className="w-8 h-8 animate-spin text-[#0066CC] mx-auto mb-4" />
                          <p className="text-[#0066CC] font-medium">מתחבר למערכת...</p>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>

                  {/* Form Header */}
                  <div className="text-center mb-8">
                    <h1 className="text-2xl font-bold text-gray-900 mb-3">אנחנו מתחברים – אתה מתפנה ללמוד</h1>
                    <p className="text-gray-600 leading-relaxed">
                      תן לנו רגע לזהות אותך – ונחבר אותך בקליק לכל מערכות הלימוד שלך
                    </p>
                  </div>

                  <form onSubmit={handleSubmit} className="space-y-6">
                    {/* Username */}
                    <div className="space-y-2">
                      <Label htmlFor="username" className="text-sm font-medium text-gray-700">
                        שם משתמש *
                      </Label>
                      <div className="relative">
                        <Input
                          id="username"
                          type="text"
                          value={formData.username}
                          onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                          onBlur={() => handleFieldBlur("username")}
                          className={`pl-10 pr-3 py-3 border rounded-lg transition-all duration-200 ${
                            errors.username
                              ? "border-red-300 focus:ring-red-500 focus:border-red-500"
                              : "border-gray-300 focus:ring-2 focus:ring-[#0066CC] focus:border-[#0066CC]"
                          }`}
                          placeholder="הכנס שם משתמש"
                          required
                          aria-describedby={errors.username ? "username-error" : undefined}
                        />
                        <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      </div>
                      {errors.username && (
                        <motion.p
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          id="username-error"
                          className="text-sm text-red-600 flex items-center gap-1"
                        >
                          <AlertCircle className="w-4 h-4" />
                          {errors.username}
                        </motion.p>
                      )}
                    </div>

                    {/* Password */}
                    <div className="space-y-2">
                      <Label htmlFor="password" className="text-sm font-medium text-gray-700">
                        סיסמה *
                      </Label>
                      <div className="relative">
                        <Input
                          id="password"
                          type={showPassword ? "text" : "password"}
                          value={formData.password}
                          onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                          onBlur={() => handleFieldBlur("password")}
                          className={`pl-10 pr-3 py-3 border rounded-lg transition-all duration-200 ${
                            errors.password
                              ? "border-red-300 focus:ring-red-500 focus:border-red-500"
                              : "border-gray-300 focus:ring-2 focus:ring-[#0066CC] focus:border-[#0066CC]"
                          }`}
                          placeholder="הכנס סיסמה"
                          required
                          aria-describedby={errors.password ? "password-error" : undefined}
                        />
                        <Lock className="absolute left-10 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                          aria-label={showPassword ? "הסתר סיסמה" : "הצג סיסמה"}
                        >
                          {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                        </button>
                      </div>
                      {errors.password && (
                        <motion.p
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          id="password-error"
                          className="text-sm text-red-600 flex items-center gap-1"
                        >
                          <AlertCircle className="w-4 h-4" />
                          {errors.password}
                        </motion.p>
                      )}
                    </div>

                    {/* University */}
                    <div className="space-y-2">
                      <Label htmlFor="universityId" className="text-sm font-medium text-gray-700">
                        מוסד לימוד *
                      </Label>
                      <div className="relative">
                        <Select
                          value={formData.universityId}
                          onValueChange={(value) => setFormData({ ...formData, universityId: value })}
                          onOpenChange={() => handleFieldBlur("universityId")}
                        >
                          <SelectTrigger
                            className={`pl-10 pr-3 py-3 border rounded-lg transition-all duration-200 ${
                              errors.universityId
                                ? "border-red-300 focus:ring-red-500 focus:border-red-500"
                                : "border-gray-300 focus:ring-2 focus:ring-[#0066CC] focus:border-[#0066CC]"
                            }`}
                          >
                            <div className="flex-1 text-right">
                              <SelectValue placeholder="בחר מוסד לימוד" />
                            </div>
                          </SelectTrigger>
                          <SelectContent>
                            {universities.map((uni) => (
                                                          <SelectItem key={uni.id} value={uni.id} className="text-right">
                              {uni.name}
                            </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <GraduationCap className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      </div>
                      {errors.universityId && (
                        <motion.p
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="text-sm text-red-600 flex items-center gap-1"
                        >
                          <AlertCircle className="w-4 h-4" />
                          {errors.universityId}
                        </motion.p>
                      )}
                    </div>

                    {/* Form Options */}
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2 space-x-reverse">
                        <Checkbox
                          id="remember"
                          checked={formData.rememberMe}
                          onCheckedChange={(checked) => setFormData({ ...formData, rememberMe: checked as boolean })}
                        />
                        <Label htmlFor="remember" className="text-sm text-gray-600">
                          זכור אותי
                        </Label>
                      </div>
                      <button 
                        type="button"
                        onClick={() => setShowForgotPasswordModal(true)}
                        className="text-sm text-[#0066CC] hover:underline transition-colors"
                      >
                        שכחת סיסמה?
                      </button>
                    </div>

                    {/* Submit Button */}
                    <Button
                      type="submit"
                      className="w-full bg-[#0066CC] hover:bg-[#0052A3] text-white py-3.5 rounded-lg font-medium transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98] shadow-lg hover:shadow-xl"
                      disabled={isLoading || Object.keys(errors).length > 0}
                    >
                      {isLoading ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          מתחבר...
                        </>
                      ) : (
                        "התחברות"
                      )}
                    </Button>
                  </form>
                </motion.div>
              </div>
            </div>

            {/* Visual Section - Right (40%) */}
            <div className="flex-[0.4] relative overflow-hidden hidden lg:flex flex-col items-center justify-center">
              {/* Enhanced Background Gradients */}
              <div className="absolute inset-0 bg-gradient-to-br from-white via-blue-50/30 to-white"></div>
              <motion.div
                className="absolute inset-0 bg-gradient-to-r from-blue-600/3 via-indigo-600/2 to-blue-800/3"
                animate={{
                  background: [
                    "linear-gradient(45deg, rgba(59, 130, 246, 0.03) 0%, rgba(99, 102, 241, 0.02) 50%, rgba(37, 99, 235, 0.03) 100%)",
                    "linear-gradient(45deg, rgba(37, 99, 235, 0.03) 0%, rgba(59, 130, 246, 0.02) 50%, rgba(99, 102, 241, 0.03) 100%)",
                    "linear-gradient(45deg, rgba(99, 102, 241, 0.03) 0%, rgba(37, 99, 235, 0.02) 50%, rgba(59, 130, 246, 0.03) 100%)",
                  ],
                }}
                transition={{
                  duration: 8,
                  repeat: Infinity,
                  ease: "linear",
                }}
              />

              {/* Grid Pattern */}
              <div className="absolute inset-0 bg-[linear-gradient(rgba(59,130,246,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(59,130,246,0.03)_1px,transparent_1px)] bg-[size:50px_50px] opacity-20" />

              {/* Geometric Shapes */}
              <motion.div
                className="absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-blue-400/8 to-indigo-400/8 rounded-full blur-xl"
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.1, 0.2, 0.1],
                }}
                transition={{
                  duration: 6,
                  repeat: Infinity,
                  ease: "easeInOut",
                }}
              />

              <motion.div
                className="absolute bottom-20 right-10 w-24 h-24 bg-gradient-to-br from-indigo-400/8 to-blue-400/8 rounded-full blur-xl"
                animate={{
                  scale: [1.2, 1, 1.2],
                  opacity: [0.15, 0.25, 0.15],
                }}
                transition={{
                  duration: 8,
                  repeat: Infinity,
                  ease: "easeInOut",
                  delay: 2,
                }}
              />

              {/* Floating Particles */}
              <motion.div
                animate={{
                  x: [0, 20, 0],
                  y: [0, -15, 0],
                }}
                transition={{
                  duration: 6,
                  repeat: Number.POSITIVE_INFINITY,
                  ease: "easeInOut",
                }}
                className="absolute top-1/4 left-8 w-6 h-6 bg-gradient-to-r from-blue-400/5 to-indigo-400/5 backdrop-blur-sm rounded-full"
              />

              <motion.div
                animate={{
                  x: [0, -25, 0],
                  y: [0, 20, 0],
                }}
                transition={{
                  duration: 5,
                  repeat: Number.POSITIVE_INFINITY,
                  ease: "easeInOut",
                  delay: 1,
                }}
                className="absolute bottom-1/4 right-12 w-4 h-4 bg-gradient-to-r from-indigo-400/5 to-blue-400/5 backdrop-blur-sm rounded-full"
              />

              <motion.div
                animate={{
                  x: [0, 15, 0],
                  y: [0, -10, 0],
                }}
                transition={{
                  duration: 4,
                  repeat: Number.POSITIVE_INFINITY,
                  ease: "easeInOut",
                  delay: 2,
                }}
                className="absolute top-3/4 left-1/4 w-3 h-3 bg-gradient-to-r from-blue-400/5 to-indigo-400/5 backdrop-blur-sm rounded-full"
              />

              {/* Main Content */}
              <div className="relative z-10 text-center max-w-sm">
                <motion.div
                  animate={{
                    y: [0, -10, 0],
                  }}
                  transition={{
                    duration: 4,
                    repeat: Number.POSITIVE_INFINITY,
                    ease: "easeInOut",
                  }}
                  className="mb-8"
                >
                  <div className="w-40 h-40 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-full flex items-center justify-center shadow-2xl mx-auto">
                    <GraduationCap className="w-20 h-20 text-white" />
                  </div>
                </motion.div>

                <motion.h2
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3 }}
                  className="text-2xl font-bold text-gray-900 mb-4"
                >
                  הכניסה שלך לעולם הלמידה
                </motion.h2>

                <motion.p
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.5 }}
                  className="text-gray-600 leading-relaxed mb-8"
                >
                  פלטפורמה מתקדמת המחברת אותך לכל מערכות הלימוד באוניברסיטה שלך
                </motion.p>

                {/* Enhanced Trust Badges */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.7 }}
                  className="grid grid-cols-2 gap-4"
                >
                  <div className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-gray-200/50 hover:shadow-xl transition-all duration-300">
                    <div className="w-10 h-10 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-full flex items-center justify-center mx-auto mb-3">
                      <Lock className="w-5 h-5 text-blue-600" />
                    </div>
                    <p className="text-sm text-gray-700 font-medium">מאובטח</p>
                  </div>
                  <div className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-gray-200/50 hover:shadow-xl transition-all duration-300">
                    <div className="w-10 h-10 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-full flex items-center justify-center mx-auto mb-3">
                      <CheckCircle className="w-5 h-5 text-blue-600" />
                    </div>
                    <p className="text-sm text-gray-700 font-medium">מאומת</p>
                  </div>
                </motion.div>

                {/* Additional Features */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.9 }}
                  className="mt-8 space-y-3"
                >
                  <div className="flex items-center justify-center space-x-2 space-x-reverse text-sm text-gray-600">
                    <Zap className="w-4 h-4 text-blue-600" />
                    <span>חיבור אוטומטי לכל המערכות</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2 space-x-reverse text-sm text-gray-600">
                    <Shield className="w-4 h-4 text-blue-600" />
                    <span>אבטחה ברמה הבנקאית</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2 space-x-reverse text-sm text-gray-600">
                    <Clock className="w-4 h-4 text-blue-600" />
                    <span>חיסכון משמעותי בזמן</span>
                  </div>
                </motion.div>
              </div>
            </div>
          </div>

          {/* Forgot Password Modal */}
          <Dialog open={showForgotPasswordModal} onOpenChange={setShowForgotPasswordModal}>
            <DialogContent className="sm:max-w-md">
              <div className="space-y-4">
                <div className="text-center">
                  <div className="w-16 h-16 bg-red-50 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Lock className="w-8 h-8 text-red-500" />
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">אין לנו גישה לאיפוס סיסמה</h3>
                  <p className="text-gray-600 mb-6">
                    לצערנו, אין לנו אפשרות לאפס סיסמה ישירות מהמערכת שלנו. 
                    אנא פנה לאתר האוניברסיטה שלך לאיפוס הסיסמה.
                  </p>
                </div>
                
                <div className="bg-blue-50 rounded-lg p-4">
                  <h4 className="font-medium text-blue-900 mb-2">מה לעשות:</h4>
                  <ol className="text-sm text-blue-800 space-y-1 list-decimal list-inside">
                    <li>לך לאתר האוניברסיטה שלך</li>
                    <li>חפש את האפשרות "שכחתי סיסמה" או "איפוס סיסמה"</li>
                    <li>עקוב אחר ההוראות לאיפוס הסיסמה</li>
                    <li>חזור לכאן עם הסיסמה החדשה</li>
                  </ol>
                </div>

                <div className="flex justify-center">
                  <Button
                    variant="outline"
                    onClick={() => setShowForgotPasswordModal(false)}
                    className="flex items-center space-x-2 space-x-reverse"
                  >
                    <X className="w-4 h-4" />
                    סגור
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>

          {/* Mobile Responsive Styles */}
          <style jsx global>{`
            @media (max-width: 1024px) {
              .flex-\\[0\\.4\\] {
                display: none !important;
              }
              .flex-\\[0\\.6\\] {
                flex: 1 !important;
              }
            }
            
            @media (max-width: 640px) {
              .min-h-\\[calc\$$100vh-4rem\$$\\] .flex-\\[0\\.6\\] {
                padding: 1rem !important;
              }
            }
          `}</style>
        </div>
      </AuthErrorBoundary>
    </Suspense>
  )
}
